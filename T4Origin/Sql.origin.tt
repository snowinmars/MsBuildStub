<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".sql" encoding="utf-8"#>

<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Xml" #>

<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>

<#@ include file="t4\main.ttinclude" once="true" #>

<#
    var t4manager = Manager.Create(Host, GenerationEnvironment);

    var enumXml = LoadSourceDoc(@"origins\enums.xml");
    var enums = GetEnumDeclarations(enumXml);

    var assembliesXml = LoadSourceDoc(@"origins\assemblies.xml");
    var assemblies = GetAssemblies(assembliesXml);

    var collection = GroupByAssembly(enums, assemblies);
#>

<#
foreach(var declarations in collection.Where(x => x.Key != "All")) {
    var assemblyId = declarations.Key;
    var assembly = assemblies.First(x => x.Id == assemblyId);

    var filename = $"{assemblyId}Sql.generated.sql";
    
    var path = Path.Combine(assembly.Path, filename);

    t4manager.OutputPath = GetRootPath();
    t4manager.StartNewFile(path);
#>

--------------------------------------------------------------------------------
-- <auto-generated>
--     This code was generated at <#= DateTime.UtcNow.ToString("F") #> UTC.
--
--     Changes to this file may cause incorrect behavior and will be lost if
--     the code is regenerated.
-- </auto-generated>
--------------------------------------------------------------------------------

<# foreach (var enumDeclaration in declarations.SelectMany(x => x)) { #>
    MERGE <#= enumDeclaration.CsName #>Enum AS [target]
        USING (VALUES 
        <# for (var i = 0; i < enumDeclaration.Properties.Count; i++) { #>
        <#
            var property = enumDeclaration.Properties[i]; 
            var separator = i == 0 ? "" : ",";
        #>
        <#= separator #> ( <#= property.Value #>, '<#= property.CsName #>')
        <# } #>
        ) AS [source] ([Id], [Value])
    ON [source].[Id] = [target].[Id]
    WHEN MATCHED THEN UPDATE SET [target].[Value] = [source].[Value]
    WHEN NOT MATCHED BY TARGET THEN INSERT([Id], [Value]) VALUES ([source].[Id], [source].[Value])
    WHEN NOT MATCHED BY SOURCE THEN DELETE
    ;;

<# } #>
<# } #>

<# t4manager.Process(true); #>