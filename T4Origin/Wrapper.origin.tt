<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" encoding="utf-8"#>

<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Xml" #>

<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>

<#@ include file="t4\main.ttinclude" once="true" #>

<#
    var t4manager = Manager.Create(Host, GenerationEnvironment);

    var enumXml = LoadSourceDoc(@"origins\enums.xml");
    var enums = GetEnumDeclarations(enumXml);

    var assembliesXml = LoadSourceDoc(@"origins\assemblies.xml");
    var assemblies = GetAssemblies(assembliesXml);

    var collection = GroupByAssembly(enums, assemblies);
#>

<#
foreach(var declarations in collection.Where(x => x.Key != "All")) {
    var assemblyId = declarations.Key;
    var assembly = assemblies.First(x => x.Id == assemblyId);

    var filename = $"{assemblyId}Wrapper.generated.cs";
    
    var path = Path.Combine(assembly.Path, filename);

    t4manager.OutputPath = GetRootPath();
    t4manager.StartNewFile(path);
#>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated at <#= DateTime.UtcNow.ToString("F") #> UTC.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project.Wrappers
{

<# foreach (var enumDeclaration in declarations.SelectMany(x => x)) { #>

    public class <#= enumDeclaration.CsName #>Wrapper
    {
        public class <#= enumDeclaration.CsName #>Property
        {
            public string CsName { get; set; }
            public int Value { get; set; }
            <# foreach(var addotionalProperty in enumDeclaration.Properties[0].AdditionalProperties) { #>
            public <#= addotionalProperty.TypeName #> <#= addotionalProperty.Name #> { get; set; }
            <# } #>
        }

        private <#= enumDeclaration.CsName #>Property[] values = new[]
        {
            <# foreach(var property in enumDeclaration.Properties) { #>
            new <#= enumDeclaration.CsName #>Property
            {
                CsName = "<#= property.CsName #>",
                Value = <#= property.Value #>,
                <# foreach(var addotionalProperty in property.AdditionalProperties) { #>
                <# if (addotionalProperty.TypeName == "string") { #>
                    <#= addotionalProperty.Name #> = "<#= addotionalProperty.Value #>",
                <# } else { #>
                    <#= addotionalProperty.Name #> = <#= addotionalProperty.Value #>,
                <# } #>
                <# } #>
            },
            <# } #>
        };

        public <#= enumDeclaration.CsName #>Property[] List()
        {
            return values;
        }
    }

<# } #>

}

<# } #>

<# t4manager.Process(true); #>